package com.steady.nifty.strategy.exception;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import javax.validation.ConstraintViolation;

import org.hibernate.validator.internal.engine.path.PathImpl;
import org.springframework.http.HttpStatus;
import org.springframework.validation.FieldError;
import org.springframework.web.context.request.ServletWebRequest;
import org.springframework.web.context.request.WebRequest;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.steady.nifty.strategy.util.Translator;

import io.swagger.v3.oas.annotations.media.Schema;
import lombok.Data;

/**
 * Based on RFC 7807 https://tools.ietf.org/html/rfc7807
 * 
 * @author rissapet
 *
 */
@Data
public class ErrorResponse {
    /**
     * A URI reference [RFC3986] that identifies the problem type. This specification encourages that, when
     * dereferenced, it provide human-readable documentation for the problem type (e.g., using HTML
     * [W3C.REC-html5-20141028]). When this member is not present, its value is assumed to be "about:blank".
     */
    @Schema(description = "A URI reference that identifies the problem type.", example = "about:blank")
    private URI type;

    /**
     * A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the
     * problem, except for purposes of localization (e.g., using proactive content negotiation; see [RFC7231], Section
     * 3.4).
     */
    @Schema(description = "A short, human-readable summary of the problem type.", example = "Not Found")
    private String title;

    /**
     * A human-readable explanation specific to this occurrence of the problem.
     */
    @Schema(description = "A human-readable explanation specific to this occurrence of the problem.", example = "1")
    private String detail;

    /**
     * The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
     */
    @Schema(description = "The HTTP status code generated by the origin server for this occurrence of the problem.", example = "404")
    private int status;

    /**
     * A URI reference that identifies the specific occurrence of the problem. It may or may not yield further
     * information if dereferenced.
     */
    @Schema(description = "A URI reference that identifies the specific occurrence of the problem.", example = "/epics/1")
    private String instance;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @Schema(description = "Optional list of validation error fields.")
    List<InvalidParam> invalidParams;

    @JsonIgnore
    private final HttpStatus httpStatus;

    public ErrorResponse(HttpStatus status) {
        this.httpStatus = status;
        this.status = status.value();
        this.title = status.getReasonPhrase();
    }

    public ErrorResponse(HttpStatus status, WebRequest request) {
        this(status);
        this.instance = ((ServletWebRequest) request).getRequest().getRequestURI().toString();
    }

    public URI getType() {
        if (type == null) {
            try {
                return new URI("about:blank");
            } catch (URISyntaxException use) {
                // Do nothing
            }
        }
        return type;
    }

    public void addDetail(String detailKey) {
        detail = Translator.toLocale(detailKey);
    }

    public void addValidationErrors(Set<ConstraintViolation<?>> constraintViolations) {
        constraintViolations.forEach(this::addValidationError);
    }

    public void addValidationErrors(List<FieldError> fieldErrors) {
        fieldErrors.forEach(this::addValidationError);
    }

    private void addValidationError(FieldError fieldError) {
        this.addValidationError(fieldError.getObjectName(), fieldError.getField(), fieldError.getRejectedValue(),
                fieldError.getDefaultMessage());
    }

    private void addValidationError(ConstraintViolation<?> cv) {
        this.addValidationError(cv.getRootBeanClass().getSimpleName(),
                ((PathImpl) cv.getPropertyPath()).getLeafNode().asString(), cv.getInvalidValue(), cv.getMessage());
    }

    private void addValidationError(String object, String field, Object rejectedValue, String messageKey) {
        if (invalidParams == null) {
            invalidParams = new ArrayList<InvalidParam>();
        }
        invalidParams.add(new InvalidParam(object, field, rejectedValue, Translator.toLocale(messageKey)));
    }
}
